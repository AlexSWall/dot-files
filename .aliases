#!/usr/bin/env sh

# Alias clear to clear the 'new line before prompt' environment variable to
# avoid new line at the top.
alias clear='unset _NEW_LINE_BEFORE_PROMPT; clear'

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias ip='ip --color=auto'

alias ls='ls -G'
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

alias docker-container-rm-all='docker rm -f $(docker ps -a -q)'

alias pushtmp='pushd "$(mktemp -d)"'

poptmp () {
	if popd
	then
		OLD_LEVEL_TWO_DIR="$(sed -E "s/(\/tmp\/tmp[^\/]*\/).*/\1/g" <<< $OLDPWD)"
		if [[ "$OLD_LEVEL_TWO_DIR" =~ "/tmp/.*" ]]
		then
			rm -rf "$OLD_LEVEL_TWO_DIR"
		else
			echo '$OLDPWD not in /tmp/; will not delete directory'
		fi
	fi
}

up() {
	cd $(printf '../%.0s' $(seq 1 $1))
}

vimopen() {
	if [[ "$#" -eq 1 ]]
	then
		DIRECTORY='.'
		REGEX_OR_GLOB="$1"
	elif [[ "$#" -eq 2 ]]
	then
		DIRECTORY="$1"
		REGEX_OR_GLOB="$2"
	else
		echo 'Usage: vimdiff [directory] regex-or-glob-string'
		echo 'Number of arguments given:' $#
		return 1
	fi

	# Try regex
	FILES="$(find -E "$DIRECTORY" -regex "$REGEX_OR_GLOB" -type f 2>/dev/null)"
	if [[ -z "$FILES" ]]
	then
		# Try glob
		FILES="$(find "$DIRECTORY" -name "$REGEX_OR_GLOB" -type f 2>/dev/null)"
	fi

	if [[ ! -z "$FILES" ]]
	then
		vim $(echo $FILES)
	else
		echo 'No matches'
	fi
}

