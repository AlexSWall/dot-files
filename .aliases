#!/usr/bin/env bash

# Alias clear to clear the 'new line before prompt' environment variable to
# avoid new line at the top.
alias clear='unset _NEW_LINE_BEFORE_PROMPT; clear'

alias clear-vim-cache='rm -rf ~/.local/share/nvim/swap/*'

case "$(uname -s)" in
	'Darwin')
		alias ls='ls -Gh'
		;;

	'Linux')
		alias ls='ls --color=auto --group-directories-first -h'
		alias ip='ip --color=auto'
		;;

	*)
		;;
esac

alias grep='grep --color=auto'

alias docker-container-rm-all='docker rm -f $(docker ps -a -q)'

alias pushtmp='pushd "$(mktemp -d)"'

function poptmp () {
	if popd
	then
		# Location of temporary folders varies between OSes, so set regex for
		# checking whether path is in temporary files/folders directory.
		case "$(uname -s)" in
			'Darwin')
				REGEX="/var/folders/[a-zA-Z0-9]{2}/[^/]+/[a-zA-Z0-9]/tmp\.[^/]*"
				;;

			'Linux')
				REGEX="/tmp/tmp[^/]*/"
				;;

			*)
				echo 'OS is neither Darwin nor Linux; cannot check for temp folder.'
				return
				;;
		esac

		# Check this regex matches the previous directory path
		MATCH="$(echo "$OLDPWD" | grep -oE "$REGEX")"
		if [[ $MATCH ]]
		then
			# It matches, so delete the extracted regex match
			rm -rf "$MATCH"
			echo 'Deleted temporary folder.'
		else
			# No matches
			echo '$OLDPWD not in a temporary folder; will not delete directory'
		fi
	fi
}

function up () {
	cd $(printf '../%.0s' $(seq 1 $1))
}

function vimopen () {
	if [[ "$#" -eq 1 ]]
	then
		DIRECTORY='.'
		REGEX_OR_GLOB="$1"
	elif [[ "$#" -eq 2 ]]
	then
		DIRECTORY="$1"
		REGEX_OR_GLOB="$2"
	else
		echo 'Usage: vimdiff [directory] regex-or-glob-string'
		echo 'Number of arguments given:' $#
		return 1
	fi

	# Try regex
	FILES="$(find -E "$DIRECTORY" -regex "$REGEX_OR_GLOB" -type f 2>/dev/null)"
	if [[ -z "$FILES" ]]
	then
		# Try glob
		FILES="$(find "$DIRECTORY" -name "$REGEX_OR_GLOB" -type f 2>/dev/null)"
	fi

	if [[ ! -z "$FILES" ]]
	then
		vim $(echo $FILES)
	else
		echo 'No matches'
	fi
}

